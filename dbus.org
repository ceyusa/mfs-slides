#+TITLE:     D-Bus: The Desktop Bus
#+AUTHOR:    
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [big]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_HEADER_EXTRA: \usetheme{Hannover}\usecolortheme{default}
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

* Definition

** What's D-Bus?

*** An interprocess communication (IPC) system

    + A wire protocol for exposing a typical object-oriented
      language/framework to other applications

** What's D-Bus?

*** A bus daemon that allows applications to find and monitor one another
    
    + It makes it simple and reliable to code a "single instance" application
      or daemon, 

    + It makes it simple to launch applications and daemons on demand when
      their services are needed 

** What's D-Bus?

*** Life-cycle tracking.

*** Service activation. 

*** Security policy.

* Use cases

** Use cases

*** System

*** Session

** System (I)

*** Communication between the desktop session and the operating system.

*** Operating system would include the kernel and any system daemons or processes.

** System (II)

*** Examples:

    + PolicyKit

    + DeviceKit

    + NetworkManager

    + PackageKit

** Session (I)

*** Communication between desktop applications in the same desktop session.

*** To allow integration of the desktop session as a whole.

*** It Addresses issues of process life-cycle.

** Session (II)

*** Examples:

    + Tracker

    + Screen Saver

    + Settings Daemon


* Design principles

** Design principles

   + Binary protocol designed to be used asynchronously.

** Design principles

   + Stateful, reliable connections held open over time.

** Design principles

   + The message bus is a single-host daemon.

** Design principles

   + Many implementation and deployment issues are specified rather than left
     ambiguous/configurable/pluggable.

** Design principles

   + Security features to support the systemwide mode of the message bus. 

* Buses

** Buses

*** There are two major components: 
    
    + A library: Used by two processes to exchange messages among themselves.

    + A daemon: The actual bus, a kind of *router* where messages are
      transported.

*** Multiple buses may be active simultaneously on a single system. 

** Buses

*** A GNOME environment normally runs two kinds of buses: 

    + A _system bus_ for miscellaneous system-wide communication.

    + A _session bus_ used by a single user's ongoing desktop session.

** Buses

*** D-Bus is aware of user identities.

*** D-Bus support flexible authentication mechanisms and access controls.

*** The system bus may see traffic from and to any number of user identities.

* Addresses

** Addresses

Every bus has an address describing how to connect to it. 

** Addresses

*** A bus address will typically be:
    
    + The file-name of a Unix-domain socket

    + A TCP port where a bus daemon is listening on an IP-domain socket.
    
    + A descriptor for some other low-level communications scheme. 

** Addresses

The details of how to hook up to the bus daemon are hidden from the client by
the dbus library.

* Object Model

** Object Paths

   + The idea of an object path is that higher-level bindings can name native
     object instances, and allow remote applications to refer to them.

   + The object path looks like a file-system path, for example an object
     could be named /org/kde/kspread/sheets/3/cells/4/5.

** Methods and Signals

*** Methods 

    + Are operations that can be invoked on an object, with optional input and
      output.

*** Signals 
    
    + Are broadcasts from the object to any interested observers of the
      object.

** Interfaces

*** Each object supports one or more interfaces.

   + Think of an interface as a named group of methods and signals.

   + Interfaces define the type of an object instance.

** Interfaces

*** D-Bus identifies interfaces with a simple namespaced string
    
    + org.freedesktop.Introspectable

** Interfaces

   + Most bindings will map these interface names directly to the appropriate
     programming language construct.

** Proxies

   + A proxy object is a convenient native object created to represent a
     remote object in another process.

   + The low-level DBus API involves manually creating a method call message,
     sending it, then manually receiving and processing the method reply
     message.

** Proxies

   + Higher-level bindings provide proxies as an alternative. 

   + Proxies look like a normal native object.

   + When you invoke a method on the proxy object:

     - The binding converts it into a DBus method call message.

     - Waits for the reply message.

     - Unpacks the return value.
   
     - Returns it from the native method.

* Bus names

** Bus names

   + When each application connects to the bus daemon, the daemon immediately
     assigns it a name, called the unique connection name.

   + A unique name begins with a ':' (colon) character. 

   + These names are never reused during the lifetime of the bus daemon 

     - That is, you know a given name will always refer to the same
       application.

** Bus names

*** An example of a unique name might be :34-907. 

*** The numbers after the colon have no meaning other than their uniqueness.

** Bus names

   + When a name is mapped to a particular application's connection, that
     application is said to *own* that name.

   + Applications may ask to own additional *well-known names*. 

   + You could think of the unique names as IP addresses, and the well-known
     names as domain names.

** Bus names (example)

   + You could write a specification to define a name called
     com.mycompany.TextEditor.

   + An application should have an object at the path
     /com/mycompany/TextFileManager 

   + The appplication would support the interface org.freedesktop.FileHandler.

** Bus names

*** Names are used to track life-cycle. 

   + When an application exits (or crashes), its connection to the message bus
     will be closed by the operating system kernel.

   + The message bus then sends out notification messages telling remaining
     applications that the application's names have lost their owner.

   + By tracking these notifications, your application can reliably monitor
     the lifetime of other applications.

** Bus names

*** Bus names can also be used to coordinate single-instance applications.

* Example

** Controlling Spotify
#+begin_src shell :results output :exports both
$ gdbus call --session \
--dest org.mpris.MediaPlayer2.spotify \
--object-path /org/mpris/MediaPlayer2 \
--method org.mpris.MediaPlayer2.Player.PlayPause
#+end_src

** Desktop Notifications

#+begin_src shell :results output :exports bot
$ gdbus call --session \
   --dest org.freedesktop.Notifications \
   --object-path /org/freedesktop/Notifications \
   --method org.freedesktop.Notifications.Notify \
   my_app_name \
   42 \
   gtk-dialog-info \
   "The Summary" \
   "Here's the body of the notification" \
   [] \
   {} \
   5000
#+end_src

* Messages

** Messages

*** D-Bus works by sending messages between processes.

** Messages

*** There are 4 message types:

    + *Method call messages* ask to invoke a method on an object.

    + *Method return messages* return the results of invoking a method.

    + *Error messages* return an exception caused by invoking a method.

    + *Signal messages* are notifications that a given signal has been
      emitted.

** Messages

*** A method call maps very simply to messages.

** Messages

*** Each message has a _header_ and a _body_

   + You can think of the header as the routing information for the
     message, and the body as the payload. 

   + Header fields might include the sender bus name, destination bus name,
     method or signal name, and so forth. 

* Calling a method

** Calling a method

*** A method call in DBus consists of two messages:

    + A method call message sent from process A to process B.

      - The call message will contain any arguments to the method.
    
    + A matching method reply message sent from process B to process A. 

      - The reply message may indicate an error, or may contain data returned
        by the method.

** Calling a method

    + The application constructs a method call message itself.

    + The method call message is sent to the bus daemon.

    + If a process owns that name, the bus daemon forwards the method call to
      that process.

    + The receiving process unpacks the method call message. 

    + The receiving process may immediately run the method and send a method
      reply message to the bus daemon. 

    + The bus daemon receives the method reply message and sends it to the
      process that made the method call.

    + The process that made the method call looks at the method reply and uses
      the return values.

** Calling a method

*** The bus daemon never reorders messages.

* Emitting a Signal

** Emitting a Signal

   + A signal is a unidirectional broadcast. 

   * The signal may contain arguments (a data payload), but it never has a
     "return value."

** Emitting a Signal

   + The emitter (aka sender) of a signal has no knowledge of the signal
     recipients. 

   + Recipients register with the bus daemon to receive signals based on
     "match rules"

     - Match rules would typically include the sender and the signal name.

** Emitting a Signal

   + A signal message is created and sent to the bus daemon.

   + Any process on the message bus can register "match rules" indicating
     which signals it is interested in.

   + The bus daemon examines the signal and determines which processes are
     interested in it. It sends the signal message to these processes.

   + Each process receiving the signal decides what to do with it.
